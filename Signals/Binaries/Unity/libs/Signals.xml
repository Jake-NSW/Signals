<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Signals</name>
    </assembly>
    <members>
        <member name="T:Woosh.Signals.Propagation">
            <summary>
            Which direction should flags propagate too. This is used to determine if the event should be sent to the parent or children
            dispatchers.
            </summary>
        </member>
        <member name="F:Woosh.Signals.Propagation.None">
            <summary>
            No Propagation will be used when the event is sent. Meaning this will only be sent to the callbacks registered to this
            dispatcher. 
            </summary>
        </member>
        <member name="F:Woosh.Signals.Propagation.Trickle">
            <summary>
            Sends events downstream to dispatchers that are children of this dispatcher. The children is determined by the trickle
            event callback that is defined in the constructor of the dispatcher.
            </summary>
        </member>
        <member name="F:Woosh.Signals.Propagation.Bubble">
            <summary>
            Sends events upstream to the dispatcher that is the parent of this dispatcher. The parent is determined by the bubble
            event callback that is defined in the constructor of the dispatcher.
            </summary>
        </member>
        <member name="F:Woosh.Signals.Propagation.Both">
            <summary>
            Sends events both upstream and downstream. This is a combination of the Trickle and Bubble flags.
            </summary>
        </member>
        <member name="T:Woosh.Signals.BubbleEvent">
            <summary>
            Helper delegate for the bubble event found in <see cref="T:Woosh.Signals.Dispatcher"/>
            </summary>
        </member>
        <member name="T:Woosh.Signals.TrickleEvent">
            <summary>
            Helper delegate for the trickle event found in <see cref="T:Woosh.Signals.Dispatcher"/>
            </summary>
        </member>
        <member name="T:Woosh.Signals.Dispatcher">
            <summary>
            The Dispatcher is responsible for dispatching events to all registered callbacks. It will also propagate the event to the
            parent and children of what ever it is attached to. Which is done by using the propagation flags.
            </summary>
        </member>
        <member name="P:Woosh.Signals.Dispatcher.Empty">
            <summary>
            Provides a way of using a dispatcher that does not do anything. This is useful for when you want to have a
            observable "Component" but its attached to something that isn't observable.
            </summary>
        </member>
        <member name="P:Woosh.Signals.Dispatcher.Attached">
            <summary>
            The Object that this dispatcher has been instantiated for. This is used to determine the parent and children of this
            dispatcher via its Bubble and Trickle callbacks defined in the constructor.
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.#ctor">
            <summary>
            Creates a basic dispatcher that doesn't propagate events.
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.#ctor(System.Object,Woosh.Signals.BubbleEvent,Woosh.Signals.TrickleEvent)">
            <summary>
            Creates a dispatcher that has event propagation, that will use the bubble and trickle callbacks to determine the parent
            and children dispatchers. 
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.Dispose">
            <summary>
            Removes all the events from this dispatchers registry
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.Run``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)">
            <summary>
            Runs a new event through the dispatcher, which will then be dispatched to all registered callbacks. An event can be consumed
            by one of its callbacks, which will stop the event from being dispatched to any other callbacks. This is useful for being
            able to stop an event from propagating to the parent or children. Will not run async callbacks, as it doesn't make sense.
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.RunAsync``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)">
            <summary>
            Runs a new event through the dispatcher, which will then be dispatched to all registered callbacks. Events can't be consumed
            as this is an async dispatcher. This will also run normal callbacks, but it will not wait for them to finish as they are not
            async. Only use RunAsync if you know there is a callback that uses a task. As using this can be considered a performance hit.
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.Unregister(System.Type,System.Delegate)">
            <summary>
            Unregisters a callback from the dispatcher.
            </summary>
        </member>
        <member name="E:Woosh.Signals.Dispatcher.Registered">
            <summary>
            A callback that is invoked when a new callback is registered. Useful for the recorder or debugging. 
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.Count(System.Type)">
            <summary>
            Returns the count of all the callbacks registered for the given type.
            </summary>
        </member>
        <member name="M:Woosh.Signals.Dispatcher.Register(System.Type,System.Delegate)">
            <summary>
            Registers a new callback for the dispatcher
            </summary>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Any``1(Woosh.Signals.IDispatchTable)">
            <summary>
            Checks if there are any callbacks registered for the given signal type.
            </summary>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Count``1(Woosh.Signals.IDispatchTable)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Count(System.Type)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Run``1(Woosh.Signals.IDispatchExecutor,``0,Woosh.Signals.Propagation,System.Object)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Run``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.RunAsync``1(Woosh.Signals.IDispatchExecutor,``0,Woosh.Signals.Propagation,System.Object)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.RunAsync``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Run``1(Woosh.Signals.IDispatchExecutor,Woosh.Signals.Propagation,System.Object)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Run``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.RunAsync``1(Woosh.Signals.IDispatchExecutor,Woosh.Signals.Propagation,System.Object)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.RunAsync``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Record(Woosh.Signals.IDispatchTable)">
            <summary>
            Records all callbacks invoked by the given dispatcher. This is used to more easily unregister all callbacks registered.
            Because of this it allows you to use anon functions for callbacks.
            </summary>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Register``1(Woosh.Signals.IDispatchTable,Woosh.Signals.StructCallback{``0})">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Register(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Register``1(Woosh.Signals.IDispatchTable,Woosh.Signals.AsyncStructCallback{``0})">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Register(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Register``1(Woosh.Signals.IDispatchTable,System.Action)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Register(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Register(Woosh.Signals.IDispatchTable,Woosh.Signals.RegisteredEventType)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Register(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Unregister``1(Woosh.Signals.IDispatchTable,Woosh.Signals.StructCallback{``0})">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Unregister(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Unregister``1(Woosh.Signals.IDispatchTable,Woosh.Signals.AsyncStructCallback{``0})">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Register(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Unregister``1(Woosh.Signals.IDispatchTable,System.Action)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Unregister(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.DispatcherUtility.Unregister(Woosh.Signals.IDispatchTable,Woosh.Signals.RegisteredEventType)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Unregister(System.Type,System.Delegate)"/>
        </member>
        <member name="T:Woosh.Signals.IDispatcher">
            <summary>
            A combination of <see cref="T:Woosh.Signals.IDispatchExecutor"/> and <see cref="T:Woosh.Signals.IDispatchTable"/>.
            </summary>
        </member>
        <member name="T:Woosh.Signals.IDispatchExecutor">
            <summary>
            An interface for defining where callbacks are executed from.
            </summary>
        </member>
        <member name="M:Woosh.Signals.IDispatchExecutor.Run``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Run``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)"/>
        </member>
        <member name="M:Woosh.Signals.IDispatchExecutor.RunAsync``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.RunAsync``1(Woosh.Signals.Event{``0},Woosh.Signals.Propagation)"/>
        </member>
        <member name="T:Woosh.Signals.IDispatchTable">
            <summary>
            An interface for defining a place where callbacks are registered too.
            </summary>
        </member>
        <member name="E:Woosh.Signals.IDispatchTable.Registered">
            <inheritdoc cref="E:Woosh.Signals.Dispatcher.Registered"/>
        </member>
        <member name="M:Woosh.Signals.IDispatchTable.Count(System.Type)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Count(System.Type)"/>
        </member>
        <member name="M:Woosh.Signals.IDispatchTable.Register(System.Type,System.Delegate)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Register(System.Type,System.Delegate)"/>
        </member>
        <member name="M:Woosh.Signals.IDispatchTable.Unregister(System.Type,System.Delegate)">
            <inheritdoc cref="M:Woosh.Signals.Dispatcher.Unregister(System.Type,System.Delegate)"/>
        </member>
    </members>
</doc>
